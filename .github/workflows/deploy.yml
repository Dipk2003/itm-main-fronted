# =============================================================================
# Indian Trade Mart Frontend - CI/CD Pipeline
# =============================================================================
# This workflow builds, tests, and deploys the Next.js frontend to:
# - Vercel (primary deployment)
# - AWS Elastic Beanstalk (backup/enterprise deployment)
# =============================================================================

name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual deployment
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_to_vercel:
        description: 'Deploy to Vercel'
        required: true
        default: true
        type: boolean
      deploy_to_aws:
        description: 'Deploy to AWS EB'
        required: true
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Verify installation
        run: |
          node --version
          npm --version
          npm list --depth=0

  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-report
          path: eslint-report.json
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: npm run test:ci
        env:
          CI: true

      - name: Run API validation tests
        run: npm run test:api
        continue-on-error: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ matrix.environment == 'production' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}" > .env.production
          echo "NEXT_PUBLIC_API_BASE_URL=${{ matrix.environment == 'production' && secrets.PROD_API_BASE_URL || secrets.STAGING_API_BASE_URL }}" >> .env.production
          echo "NEXT_PUBLIC_WEBSOCKET_URL=${{ matrix.environment == 'production' && secrets.PROD_WS_URL || secrets.STAGING_WS_URL }}" >> .env.production
          echo "NEXT_PUBLIC_APP_NAME=Indian Trade Mart" >> .env.production
          echo "NEXT_PUBLIC_APP_VERSION=${{ github.sha }}" >> .env.production

      - name: Build application
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            NODE_ENV=production npm run build
          else
            NODE_ENV=development npm run build
          fi

      - name: Verify build output
        run: |
          npm run verify-build
          ls -la .next/

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: |
            .next/
            public/
            package.json
            next.config.js
          retention-days: 7

  # =============================================================================
  # SECURITY AND QUALITY CHECKS
  # =============================================================================

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > audit-report.json
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit
          path: audit-report.json
          retention-days: 30

  # =============================================================================
  # DEPLOYMENT TO VERCEL
  # =============================================================================

  deploy-vercel-staging:
    name: Deploy to Vercel (Staging)
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.deploy_to_vercel == true && inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: .

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_TEAM_ID }}
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}
          NEXT_PUBLIC_WEBSOCKET_URL: ${{ secrets.STAGING_WS_URL }}

      - name: Run smoke tests on staging
        run: |
          sleep 30 # Wait for deployment
          curl -f https://${{ secrets.VERCEL_STAGING_URL }}/api/health || exit 1

  deploy-vercel-production:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.deploy_to_vercel == true && inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: .

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_TEAM_ID }}
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.PROD_API_BASE_URL }}
          NEXT_PUBLIC_WEBSOCKET_URL: ${{ secrets.PROD_WS_URL }}

      - name: Run smoke tests on production
        run: |
          sleep 30 # Wait for deployment
          curl -f https://${{ secrets.VERCEL_PROD_URL }}/api/health || exit 1

  # =============================================================================
  # DEPLOYMENT TO AWS ELASTIC BEANSTALK
  # =============================================================================

  deploy-aws-eb:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.event_name == 'workflow_dispatch' && inputs.deploy_to_aws == true
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ inputs.environment }}
          path: .

      - name: Create Dockerfile for EB
        run: |
          cat > Dockerfile << EOF
          # Multi-stage build for Next.js on AWS EB
          FROM node:20-alpine AS base
          
          # Install dependencies only when needed
          FROM base AS deps
          RUN apk add --no-cache libc6-compat
          WORKDIR /app
          
          COPY package*.json ./
          RUN npm ci --only=production && npm cache clean --force
          
          # Rebuild the source code only when needed
          FROM base AS builder
          WORKDIR /app
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          
          RUN npm run build
          
          # Production image, copy all the files and run next
          FROM base AS runner
          WORKDIR /app
          
          ENV NODE_ENV production
          ENV NEXT_TELEMETRY_DISABLED 1
          
          RUN addgroup --system --gid 1001 nodejs
          RUN adduser --system --uid 1001 nextjs
          
          COPY --from=builder /app/public ./public
          COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
          COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
          
          USER nextjs
          
          EXPOSE 3000
          
          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"
          
          CMD ["node", "server.js"]
          EOF

      - name: Create .ebextensions for environment configuration
        run: |
          mkdir -p .ebextensions
          cat > .ebextensions/01-environment.config << EOF
          option_settings:
            aws:elasticbeanstalk:application:environment:
              NODE_ENV: production
              NEXT_PUBLIC_API_URL: ${{ inputs.environment == 'production' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}
              NEXT_PUBLIC_API_BASE_URL: ${{ inputs.environment == 'production' && secrets.PROD_API_BASE_URL || secrets.STAGING_API_BASE_URL }}
              NEXT_PUBLIC_WEBSOCKET_URL: ${{ inputs.environment == 'production' && secrets.PROD_WS_URL || secrets.STAGING_WS_URL }}
            aws:autoscaling:launchconfiguration:
              InstanceType: t3.micro
            aws:elasticbeanstalk:environment:
              LoadBalancerType: application
            aws:elbv2:loadbalancer:
              IdleTimeout: 60
          EOF

      - name: Create .ebextensions for health check
        run: |
          cat > .ebextensions/02-health.config << EOF
          option_settings:
            aws:elasticbeanstalk:healthreporting:system:
              SystemType: enhanced
            aws:elasticbeanstalk:application:
              Application Healthcheck URL: /api/health
            aws:elasticbeanstalk:environment:process:default:
              HealthCheckPath: /api/health
              Port: 3000
              Protocol: HTTP
          EOF

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Elastic Beanstalk
        run: |
          eb init ${{ secrets.EB_APP_NAME }} --platform "Docker" --region ${{ secrets.AWS_REGION }}

      - name: Create application version
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION_LABEL="frontend-${{ inputs.environment }}-${TIMESTAMP}-${{ github.sha }}"
          zip -r ${VERSION_LABEL}.zip . -x "*.git*" "node_modules/*" ".next/cache/*"
          
          aws elasticbeanstalk create-application-version \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --version-label ${VERSION_LABEL} \
            --source-bundle S3Bucket=${{ secrets.EB_S3_BUCKET }},S3Key=${VERSION_LABEL}.zip
          
          # Upload to S3 first
          aws s3 cp ${VERSION_LABEL}.zip s3://${{ secrets.EB_S3_BUCKET }}/

      - name: Deploy to Elastic Beanstalk
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION_LABEL="frontend-${{ inputs.environment }}-${TIMESTAMP}-${{ github.sha }}"
          ENV_NAME="${{ secrets.EB_ENV_NAME }}-${{ inputs.environment }}"
          
          eb deploy ${ENV_NAME} --version=${VERSION_LABEL} --timeout=20

      - name: Wait for deployment and run health check
        run: |
          sleep 60 # Wait for deployment to complete
          ENV_NAME="${{ secrets.EB_ENV_NAME }}-${{ inputs.environment }}"
          EB_URL=$(eb status ${ENV_NAME} | grep CNAME | awk '{print $2}')
          curl -f "http://${EB_URL}/api/health" || exit 1

  # =============================================================================
  # POST-DEPLOYMENT VALIDATION
  # =============================================================================

  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-vercel-production, deploy-aws-eb]
    if: always() && (needs.deploy-vercel-production.result == 'success' || needs.deploy-aws-eb.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: |
          npm install -g newman
          npm ci --prefer-offline --no-audit

      - name: Run end-to-end smoke tests
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            BASE_URL="${{ secrets.VERCEL_PROD_URL }}"
          else
            BASE_URL="${{ secrets.VERCEL_STAGING_URL }}"
          fi
          
          # Basic smoke tests
          curl -f "${BASE_URL}/" || exit 1
          curl -f "${BASE_URL}/api/health" || exit 1
          
          # Run API validation if collection exists
          if [ -f "tests/api-collection.json" ]; then
            newman run tests/api-collection.json --environment tests/env-${ENVIRONMENT}.json
          fi
        env:
          ENVIRONMENT: ${{ contains(github.ref, 'main') && 'production' || 'staging' }}

  # =============================================================================
  # NOTIFICATION AND CLEANUP
  # =============================================================================

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: always()
    steps:
      - name: Notify on success
        if: needs.validate-deployment.result == 'success'
        run: |
          echo "✅ Frontend deployment successful!"
          echo "Environment: ${{ contains(github.ref, 'main') && 'Production' || 'Staging' }}"
          echo "Commit: ${{ github.sha }}"
          echo "URL: ${{ contains(github.ref, 'main') && secrets.VERCEL_PROD_URL || secrets.VERCEL_STAGING_URL }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Frontend deployment failed!"
          echo "Please check the logs and fix the issues."
          exit 1

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: always()
    steps:
      - name: Clean up old artifacts
        run: echo "Artifacts will be automatically cleaned up based on retention policy"
